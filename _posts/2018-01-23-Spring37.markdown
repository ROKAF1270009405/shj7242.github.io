---
layout:     post
title:      "[Spring] 웹 소켓으로 채팅구현"

date:       2018-01-23 18:55:00
author:     "신희준"
header-img: "img/background.jpg"
comments: true
---

<head>
 <meta property="og:type" content="스프링 웹소켓 채팅">
 <meta property="og:title" content="스프링 웹소켓 채팅">
 <meta property="og:description" content="웹 소켓으로 채팅구현">
 <meta property="og:url" content="http://shj7242.github.io/2018/01/23/Spring37/">

 <meta name="twitter:card" content="스프링 웹소켓 채팅">
  <meta name="twitter:title" content="스프링 웹소켓 채팅">
  <meta name="twitter:description" content="웹 소켓으로 채팅구현">
  <meta name="FACEBOOK:domain" content="http://shj7242.github.io/2018/01/23/Spring37/">
  <meta name="facebook:card" content="스프링 웹소켓 채팅">
   <meta name="facebook:title" content="스프링 웹소켓 채팅">
   <meta name="facebook:description" content="웹 소켓으로 채팅구현">
   <meta name="facebook:domain" content="http://shj7242.github.io/2018/01/23/Spring37/">


 </head>

<br>
<H4 style ="font-weight:bold; color:black;"> </H4>

<H4 style ="font-weight:bold; color : black">2018 - 01 - 23 (화)</H4>
<br>


> 웹 소켓

<br>

프로젝트에 웹소켓을 활용하여 쪽지, 채팅 기능을 구현할 필요성이 생기게되어 웹 소켓에대해서 공부해 보았다.

사실 학교다닐 적에 통신관련 수업시간에 소켓에 대해서 수업을 들은적이 있다. 기억하기로는 OSI 5계층 중 4계층인 전송계층(Transport layer) 와 5계층인 응용계층 (Application layer) 사이에 존재하여 전송계층에 의존하고 이 두계층 사이에서 게이트? 역활을 한다. 라고 기억하고 있습니다.  

결국 .. COMPUTER NETWORKING A TOP-DOWN Approach 라는 (전공서적) 을 펼쳐서 소켓부분을 찾게되었다. 해당 책에서는 UDP / TCP 소켓 프로그래밍을 소개하는데 이를 파이썬으로 소개한다.

<br>

프로젝트에 TCP 소켓 프로그래밍을 해야하는 나는 TCP 부분을 중점적으로 보았다.

TCP는 UDP 와 달리 손실? 을 싫어한다.(데이터의 정확하고 안정적인 전달이 핵심) 기본적으로 TCP 는 3Way handshaking 을 통해 연결지향적인 통신을 한다.
이 때 클라이언트 소켓 (IP 주소 및 포트번호) 와 서버 소켓 (IP주소 및 포트번호) 에 연결을 시도한다.

1 . 클라이언트가 TCP 연결을 위해 서버로 요청 메시지를 보낸다. 이 메시지는 소켓을 거쳐 서버에 전달된다.

2 . 서버는 반대로 클라이언트 주소로 응답 메시지를 보내고 이는 출입문이라고 할 수 있는 소켓을 통해 전달된다.

3 . 승인하는 응답을 보낼 경우 핸드셰이킹이 이루어진다. 소켓을 연결하는 파이프를 통해 바이트를 송수신 할 수 있게 된다.  

웹소켓은 TCP 접속에 양방향 통신 채널하는 프로토콜이며 웹소켓의 API 는 W3C 에의해 표준화 되어있다.

<br>


> 실습

<br>

1 .. https://github.com/sockjs/sockjs-client 에서 dist 의 sockjs.js 를 내려받아 프로젝트의 resource/js 폴더에 추가한다.

2 .. pom.xml 에 라이브러리 추가 (프로젝트의 스프링 버전은 4.1.7이다.)

~~~xml
<!-- https://mvnrepository.com/artifact/org.springframework/spring-websocket -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-websocket</artifactId>
    <version>4.2.4.RELEASE</version>
</dependency>
<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations -->
<dependency>
  <groupId>com.fasterxml.jackson.core</groupId>
  <artifactId>jackson-annotations</artifactId>
  <version>2.9.0</version>
</dependency>

<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
<dependency>
  <groupId>com.fasterxml.jackson.core</groupId>
  <artifactId>jackson-core</artifactId>
  <version>2.8.9</version>
</dependency>

<!-- jackson-databind -->
<dependency>
  <groupId>com.fasterxml.jackson.core</groupId>
  <artifactId>jackson-databind</artifactId>
  <version>2.8.4</version>
</dependency>
~~~

3 .. ws-config.xml 생성 (웹소켓 관련 xml)

~~~xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:websocket="http://www.springframework.org/schema/websocket"
 xmlns:mvc="http://www.springframework.org/schema/mvc"
 xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.0.xsd
  http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
 <bean id="chatHandler" class="com.almom.handler.ChatWebSocketHandler" />

 <websocket:handlers>


  <websocket:mapping handler="chatHandler" path="/chat" />
	  <websocket:handshake-interceptors>
         <bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor" />
      </websocket:handshake-interceptors>
  <websocket:sockjs />

 </websocket:handlers>

 <mvc:default-servlet-handler />
</beans>
~~~

4 .. jsp

~~~html
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>



<html>
<head>

<link rel="stylesheet" type="text/css"
	href="../../../resources/css/bootstrap-grid.css">
<link rel="stylesheet" type="text/css"
	href="../../../resources/css/bootstrap-reboot.css">
<link rel="stylesheet" type="text/css"
	href="../../../resources/css/bootstrap.css">
<link rel="stylesheet" type="text/css"
	href="../../../resources/css/bootstrap.min.css">
<link rel="stylesheet" type="text/css"
	href="../../../resources/css/page.css">
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" type="text/css"
	href="../../../resources/css/style.css">
<script type="text/javascript"
	src="../../../resources/js/jquery-3.2.1.js"></script>
<script type="text/javascript"
	src="../../../resources/js/sockjs.min.js"></script>

<style>
</style>
</head>

<body>

<c:set var="profile" value='<%=session.getAttribute("login")%>' />



 	<div class="col-12 row justify-content-center align-items-center my-5 ">
		<a href=""><img src="../../../resources/image/AlmomLogo.png"
			alt="Almom Logo" width="180px" class="img-fluid" /></a>
	</div>
	<div class="col-12">
		<div class="col-2" style="float: left">
			<span> 목록 </span>
		</div>
		<div class="col-8" style="float: left; text-align: center;">
			${tutor_name } 님과 대화</div>
		<div class="col-2" style="float: right">
			<span> 닫기 </span>
		</div>



	</div>
	<div class="col-12" style="margin-top: 40px; clear: both;">
		<div class="col-10"
			style="margin: 20px auto; text-align: center; color: white; background-color: #01D1FE; border: 1px solid #01D1FE; padding: 10px 10px; border-radius: 8px;">
			수업 일정과 강의 내용에 대해 문의해보세요. <br>(연락처 문의 또는 직접 알려주는 것은 불가)
		</div>

	</div>
	<!-- 채팅 내용 -->
	<div class="col-12">
		<div class="col-11"
			style="margin: 0 auto; border: 1px solid #01D1FE; height: 400px; border-radius: 10px; overflow:scroll" id = "chatArea">

			<div id="chatMessageArea" style = "margin-top : 10px; margin-left:10px;"></div>




		</div>
	</div>

	<!-- 채팅 입력창 -->
	<div class="col-12" style="margin-top: 20px; margin-bottom: 15px;">
		<div class="col-12" style="float: left">
			<textarea class="form-control"
				style="border: 1px solid #01D1FE; height: 65px; float: left; width: 80%"
				placeholder="Enter ..." id = "message">


				</textarea>
			<span
				style="float: right; width: 18%; height: 65px; text-align: center; background-color: #01D1FE; border-radius: 5px;">
				<a
				style="margin-top: 30px; text-align: center; color: white; font-weight: bold;" id = "sendBtn"><br>전송</a>
			</span>
		</div>

	</div>


<img id="profileImg" class="img-fluid"
					src="/displayFile?fileName=${userImage}&directory=profile" style = "display:none">
<input type="text" id="nickname" value = "${user_name }" style = "display:none">
 <input type="button" id="enterBtn" value="입장" style = "display:none">
 <input type="button" id="exitBtn" value="나가기" style = "display:none">
<script type="text/javascript">
 connect();

 function connect() {
	    sock = new SockJS('/chat');
	    sock.onopen = function() {
	        console.log('open');
	    };
	    sock.onmessage = function(evt) {
    	 var data = evt.data;
    	   console.log(data)
  		   var obj = JSON.parse(data)  	   
    	   console.log(obj)
    	   appendMessage(obj.message_content);
	    };
	    sock.onclose = function() {
	    	 appendMessage("연결을 끊었습니다.");
	        console.log('close');
	    };
	}




 function send() {
  var msg = $("#message").val();
  if(msg != ""){
	  message = {};
	  message.message_content = $("#message").val()
  	  message.TUTOR_USER_user_id = '${TUTOR_USER_user_id}'
  	  message.USER_user_id = '${profile.user_id}'
  	  message.CLASS_class_id = '${class_id}'
  	  message.message_sender = '${profile.user_id}'
  }




  sock.send(JSON.stringify(message));
  $("#message").val("");
 }




 function getTimeStamp() {
   var d = new Date();
   var s =
     leadingZeros(d.getFullYear(), 4) + '-' +
     leadingZeros(d.getMonth() + 1, 2) + '-' +
     leadingZeros(d.getDate(), 2) + ' ' +

     leadingZeros(d.getHours(), 2) + ':' +
     leadingZeros(d.getMinutes(), 2) + ':' +
     leadingZeros(d.getSeconds(), 2);

   return s;
 }

 function leadingZeros(n, digits) {
   var zero = '';
   n = n.toString();

   if (n.length < digits) {
     for (i = 0; i < digits - n.length; i++)
       zero += '0';
   }
   return zero + n;
 }







 function appendMessage(msg) {

	 if(msg == ''){
		 return false;
	 }else{


	 var t = getTimeStamp();
	 $("#chatMessageArea").append("<div class='col-12 row' style = 'height : auto; margin-top : 5px;'><div class='col-2' style = 'float:left; padding-right:0px; padding-left : 0px;'><img id='profileImg' class='img-fluid' src='/displayFile?fileName=${userImage}&directory=profile' style = 'width:50px; height:50px; '><div style='font-size:9px; clear:both;'>${user_name}</div></div><div class = 'col-10' style = 'overflow : y ; margin-top : 7px; float:right;'><div class = 'col-12' style = ' background-color:#ACF3FF; padding : 10px 5px; float:left; border-radius:10px;'><span style = 'font-size : 12px;'>"+msg+"</span></div><div col-12 style = 'font-size:9px; text-align:right; float:right;'><span style ='float:right; font-size:9px; text-align:right;' >"+t+"</span></div></div></div>")		 

	  var chatAreaHeight = $("#chatArea").height();
	  var maxScroll = $("#chatMessageArea").height() - chatAreaHeight;
	  $("#chatArea").scrollTop(maxScroll);

	 }
 }
 $(document).ready(function() {
  $('#message').keypress(function(event){
   var keycode = (event.keyCode ? event.keyCode : event.which);
   if(keycode == '13'){
    send();
   }
   event.stopPropagation();
  });



  $('#sendBtn').click(function() { send(); });/*
  $('#enterBtn').click(function() { connect(); });
  $('#exitBtn').click(function() { disconnect(); }); */
 });
</script>

</body>
</html>

~~~

* handler

~~~java
package com.almom.handler;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import java.util.concurrent.ConcurrentHashMap;

import javax.inject.Inject;

import org.springframework.web.socket.CloseStatus;

import org.springframework.web.socket.TextMessage;

import org.springframework.web.socket.WebSocketSession;

import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.almom.domain.ChatRoomVO;
import com.almom.domain.MessageVO;
import com.almom.domain.UserVO;
import com.almom.persistence.ChatDAO;
import com.google.gson.Gson;

public class ChatWebSocketHandler extends TextWebSocketHandler {

	@Inject
	private ChatDAO dao;

	private List<WebSocketSession> connectedUsers;

	public ChatWebSocketHandler() {
	      connectedUsers = new ArrayList<WebSocketSession>();
	   }

	private Map<String, WebSocketSession> users = new ConcurrentHashMap<String, WebSocketSession>();

	@Override

	public void afterConnectionEstablished(

			WebSocketSession session) throws Exception {

		log(session.getId() + " 연결 됨!!");

		users.put(session.getId(), session);
		connectedUsers.add(session);
	}

	@Override

	public void afterConnectionClosed(

			WebSocketSession session, CloseStatus status) throws Exception {

		log(session.getId() + " 연결 종료됨");
		connectedUsers.remove(session);
		users.remove(session.getId());

	}


	@Override
	   protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {


		System.out.println(message.getPayload());

		  Map<String, Object> map = null;

	      MessageVO messageVO = MessageVO.convertMessage(message.getPayload());

	      System.out.println("1 : " + messageVO.toString());


	      ChatRoomVO roomVO  = new ChatRoomVO();
	      roomVO.setCLASS_class_id(messageVO.getCLASS_class_id()); //클래스
	      roomVO.setTUTOR_USER_user_id(messageVO.getTUTOR_USER_user_id()); //튜터
	      roomVO.setUSER_user_id(messageVO.getUSER_user_id()); //유저

	      ChatRoomVO croom =null;
	      if(!messageVO.getUSER_user_id().equals(messageVO.getTUTOR_USER_user_id())) {
	    	  System.out.println("a");



	    	  if(dao.isRoom(roomVO) == null ) {
	    		  System.out.println("b");
	    		  dao.createRoom(roomVO);
	    		  System.out.println("d");
	    		  croom = dao.isRoom(roomVO);

	    	  }else {
	    		  System.out.println("C");
	    		  croom = dao.isRoom(roomVO);
	    	  }
	      }else {

    		  croom = dao.isRoom(roomVO);
    	  }

	      messageVO.setCHATROOM_chatroom_id(croom.getChatroom_id());
	      if(croom.getUSER_user_id().equals(messageVO.getMessage_sender())) {

	    	  messageVO.setMessage_receiver(roomVO.getTUTOR_USER_user_id());
	      }else {
	    	  messageVO.setMessage_receiver(roomVO.getUSER_user_id());
	      }




	      for (WebSocketSession websocketSession : connectedUsers) {
	         map = websocketSession.getAttributes();
	         UserVO login = (UserVO) map.get("login");

	         //받는사람
	         if (login.getUser_id().equals(messageVO.getMessage_sender())) {

	            Gson gson = new Gson();
	            String msgJson = gson.toJson(messageVO);
	            websocketSession.sendMessage(new TextMessage(msgJson));
	         }


	      }
	   }

	@Override

	public void handleTransportError(

			WebSocketSession session, Throwable exception) throws Exception {

		log(session.getId() + " 익셉션 발생: " + exception.getMessage());

	}

	private void log(String logmsg) {

		System.out.println(new Date() + " : " + logmsg);

	}

}
~~~
