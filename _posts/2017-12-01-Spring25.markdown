---
layout:     post
title:      "[Spring] 카카오톡 로그인(REST API)"

date:       2017-12-01 17:55:00
author:     "신희준"
header-img: "img/post-bg-02.jpg"
comments: true
---

<head>
 <meta property="og:type" content="website">
 <meta property="og:title" content="스프링 카카오톡 로그인 API (REST API)">
 <meta property="og:description" content="스프링 카카오톡 로그인 API (REST API)">
 <meta property="og:url" content="http://shj7242.github.io/2017/12/01/Spring25/">

 <meta name="twitter:card" content="summary">
  <meta name="twitter:title" content="스프링 카카오톡 로그인 API (REST API)">
  <meta name="twitter:description" content="스프링 카카오톡 로그인 API (REST API)">
  <meta name="FACEBOOK:domain" content="http://shj7242.github.io/2017/12/01/Spring25/">
  <meta name="facebook:card" content="summary">
   <meta name="facebook:title" content="스프링 카카오톡 로그인 API (REST API)">
   <meta name="facebook:description" content="스프링 카카오톡 로그인 API (REST API)">
   <meta name="facebook:domain" content="http://shj7242.github.io/2017/12/01/Spring25/">


 </head>

<br>
<H4 style ="font-weight:bold; color:black;"> </H4>
<br>
<H4 style ="font-weight:bold; color : black">2017 - 12 - 01 (금)</H4>

<br>

> 카카오톡 로그인 ( REST API )

<br>

1 . <a href = "https://developers.kakao.com/apps/165437/settings/user">카카오개발자센터</a> 에서 로그인 하고 로그인 API 탭에 들어가 기본정보 에서
앱 키 (REST API 키) 를 복사해 둔다. 플랫폼에서 사이트의 도메인을 적어주고 Redirect Path를 설정한다.

<img src="{{ site.baseurl }}/img/kakaorest.jpg" alt="Post Sample Image">

2 . 좌측의 사용자 관리탭에서 사용자관리 사용을 활성화 한다.

<img src="{{ site.baseurl }}/img/kakao2.jpg" alt="Post Sample Image">

3 . Spring 에서 pom.xml 을 추가해준다.

~~~xml
<!-- kakao -->
<!-- jackson-databind -->
<dependency>
  <groupId>com.fasterxml.jackson.core</groupId>
  <artifactId>jackson-databind</artifactId>
  <version>2.8.4</version>
</dependency>

<!-- httpcore(카카오) -->
<dependency>
  <groupId>org.apache.httpcomponents</groupId>
  <artifactId>httpcore</artifactId>
  <version>4.4.6</version>
</dependency>

<!-- httpclient(카카오) -->
<dependency>
  <groupId>org.apache.httpcomponents</groupId>
  <artifactId>httpclient</artifactId>
  <version>4.5.2</version>
</dependency>
~~~

4 . jsp 에서 kakaoLogin 버튼을 하나 만든후 URI 경로를 GET 방식으로 https://kauth.kakao.com/oauth/authorize?client_id={REST API 앱ID}&redirect_uri=http://{uri_redirect}}&response_type=code 로 보낸다.


5 . redirect_path 에 맞춰서 controller 메서드를 작성해준다.

~~~java
@RequestMapping(value = "/kakaologin" , produces = "application/json", method = {RequestMethod.GET, RequestMethod.POST})
public String kakaoLogin(@RequestParam("code") String code , HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception{

  JsonNode token = KakaoLogin.getAccessToken(code);

  JsonNode profile = KakaoLogin.getKakaoUserInfo(token.path("access_token").toString());
  System.out.println(profile);
  UserVO vo = KakaoLogin.changeData(profile);
  vo.setUser_snsId("k"+vo.getUser_snsId());

  System.out.println(session);
  session.setAttribute("login", vo);
  System.out.println(vo.toString());

  vo = service.kakaoLogin(vo);  
  return "login/kakaoLogin";
}
~~~

6 . kakaoLogin 이라는 자바파일을 하나 만들어준다.

~~~java
package com.bitproject.kakao;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicNameValuePair;

import com.bitproject.domain.UserVO;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class KakaoLogin {
	public static JsonNode getAccessToken(String autorize_code) {
		final String RequestUrl = "https://kauth.kakao.com/oauth/token";

		final List<NameValuePair> postParams = new ArrayList<NameValuePair>();
		postParams.add(new BasicNameValuePair("grant_type", "authorization_code"));
		postParams.add(new BasicNameValuePair("client_id", "REST API 앱키")); // REST API KEY
		postParams.add(new BasicNameValuePair("redirect_uri", "REDIRECT_PATH")); // 리다이렉트 URI
		postParams.add(new BasicNameValuePair("code", autorize_code)); // 로그인 과정중 얻은 code 값

		final HttpClient client = HttpClientBuilder.create().build();
		final HttpPost post = new HttpPost(RequestUrl);
		JsonNode returnNode = null;

		try {
			post.setEntity(new UrlEncodedFormEntity(postParams));
			final HttpResponse response = client.execute(post);
			final int responseCode = response.getStatusLine().getStatusCode();

			System.out.println("\nSending 'POST' request to URL : " + RequestUrl);
			System.out.println("Post parameters : " + postParams);
			System.out.println("Response Code : " + responseCode);

			// JSON 형태 반환값 처리
			ObjectMapper mapper = new ObjectMapper();
			returnNode = mapper.readTree(response.getEntity().getContent());

		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			// clear resources
		}

		return returnNode;

	}

	public static JsonNode getKakaoUserInfo(String autorize_code) {

		final String RequestUrl = "https://kapi.kakao.com/v1/user/me";

		final HttpClient client = HttpClientBuilder.create().build();
		final HttpPost post = new HttpPost(RequestUrl);

		// add header
		post.addHeader("Authorization", "Bearer " + autorize_code);

		JsonNode returnNode = null;

		try {
			final HttpResponse response = client.execute(post);
			final int responseCode = response.getStatusLine().getStatusCode();

			System.out.println("\nSending 'POST' request to URL : " + RequestUrl);
			System.out.println("Response Code : " + responseCode);

			// JSON 형태 반환값 처리
			ObjectMapper mapper = new ObjectMapper();
			returnNode = mapper.readTree(response.getEntity().getContent());

		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			// clear resources
		}
		return returnNode;

	}

	public static UserVO changeData(JsonNode userInfo) {
		UserVO vo = new UserVO();

		vo.setUser_snsId(userInfo.path("id").asText()); // id -> vo 넣기

		if (userInfo.path("kaccount_email_verified").asText().equals("true")) { // 이메일 받기 허용 한 경우
			vo.setUser_email(userInfo.path("kaccount_email").asText()); // email -> vo 넣기

		} else { // 이메일 거부 할 경우 코드 추후 개발

		}

		JsonNode properties = userInfo.path("properties"); // 추가정보 받아오기
		if (properties.has("nickname"))
			vo.setUser_name(properties.path("nickname").asText());
			vo.setUser_profileImagePath(properties.path("profile_image").asText());
		return vo;
	}
}
~~~

7 . login/kakaoLogin.jsp 파일 생성해서 로그인 시 메인화면으로 보내준다.

~~~html
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<html>
<head>
<title>NaverLoginTest</title>
</head>
<body>
 ${refresh}

	 <script>
		self.location = '/';
	</script>
</body>

</html>
~~~
