---
layout:     post
title:      "[Spring] 페이징"

date:       2017-10-24 11:30:00
author:     "신희준"
header-img: "img/post-bg-02.jpg"
---

<meta name="description" content="Spring스프링 애너테이션 Annotation정리 @Autowired,@Qualifier,@Resource,@Component,@PostConstruct,@Aspect
,@AOP,@POINTCUT,@AROUND,@ADVICE,@RequestMapping,@REPOSITORY,@SERVICE,@COMPONENT
">

<br>
<H4 style ="font-weight:bold; color : orange">2017 - 10 - 24 (화)</H4>
<li>페이징</li>

<br>
<H4 style ="font-weight:bold; color:orange;">코드로 배우는 스프링 웹프로젝트[구멍가게 코딩단 지음] 참조</H4>
<br>

<h5 style = "font-size: 17px; font-weight : bold;">1 .. 페이징</h5>

<br>

<p style = "font-size:14px">
페이징을 하는 이유는 한번에 최소한의 게시물 즉, 데이터를 전송받기 위함이다.
</p>

<p style = "font-size:14px">
<br>
<b>페이징 처리 절차</b>
<br><br>
1 . 페이징처리를 하기 위한 DAO인터페이스 구현
</p>

~~~java
  public List<BoardVO> listPage(int page) throws Exception;
~~~

<br>
<p style = "font-size:14px">
<br>
2 . Mapper에 SQL 추가 ( 이전에 typeAlias 설정을 통해 returnType 을 축약할 수 있다. )
</p>

~~~xml
<select id="listPage" resultType="BoardVO">
<![CDATA[
select
  bno, title, content, writer, regdate, viewcnt
from
  tbl_board
where bno > 0
order by bno desc, regdate desc
limit #{page}, 10
]]>  
</select>
~~~


<p style = "font-size:14px">
<br>
화면에 10개씩 데이터를 보여주고자 할 때 1페이지는 limit 1, 10 // 2페이지는 limit 10, 10 처럼
<br>
limit 시작할 게시글번호 , 한 페이지에 게시할 게시글 갯수
</p>

<br>
<p style = "font-size:14px">
<br>
3 . 앞서 작성한 DAO인터페이스 메소드를 구현한다.
</p>

~~~java
@Override
public List<BoardVO> listPage(int page) throws Exception {

  if (page <= 0) {
    page = 1;
  }
  page = (page - 1) * 10;
  return session.selectList(namespace + ".listPage", page);
}
~~~


<br>
<p style = "font-size:14px">
<br>
4 . Criteria 클래스 작성 ( 아래같이 게시물 하단에 수많은 글들을 파티션할 수 있도록 클래스를 생성한다.)
</p>

<img src="{{ site.baseurl }}/img/cri.JPG" alt="Post Sample Image">

~~~java
public class Criteria {

  private int page;
  private int perPageNum;

  public Criteria() {
    this.page = 1;
    this.perPageNum = 10;
  }

  public void setPage(int page) {

    if (page <= 0) {
      this.page = 1;
      return;
    }

    this.page = page;
  }

  public void setPerPageNum(int perPageNum) {

    if (perPageNum <= 0 || perPageNum > 100) {
      this.perPageNum = 10;
      return;
    }

    this.perPageNum = perPageNum;
  }

  public int getPage() {
    return page;
  }

  // method for MyBatis SQL Mapper -
  public int getPageStart() {

    return (this.page - 1) * perPageNum;
  }

  // method for MyBatis SQL Mapper
  public int getPerPageNum() {

    return this.perPageNum;
  }

  @Override
  public String toString() {
    return "Criteria [page=" + page + ", "
        + "perPageNum=" + perPageNum + "]";
  }
}
~~~



<br>
<p style = "font-size:14px">
<br>
5 . DAO인터페이스에 Criteria 파티션 별 데이터를 list로 가져올 수 있는 메서드 정의
<br><br>
6 . 매퍼를 작성해준다. 페이지의 시작 게시물번호 , 페이지 당 게시글 갯수 를 활용하여 selectList를 한다.
</p>

~~~xml
<select id="listCriteria" resultType="BoardVO">
<![CDATA[
select
 bno, title, content, writer, regdate, viewcnt
from
 tbl_board
where bno > 0
order by bno desc, regdate desc
limit #{pageStart}, #{perPageNum}
]]>  
</select>
~~~

<br>
<p style = "font-size:14px">
<br>
7 . 이전에 DAO에서 정의한 메서드를 구현해준다.
</p>


~~~JAVA
@Override
public List<BoardVO> listCriteria(Criteria cri) throws Exception{
	return session.selectList(namespace+".listCriteria",cri);
}
~~~

<br>
<p style = "font-size:14px">
<br>
8 . Service에 추가한 DAO를 처리할 인터페이스 추가 한다.

<br>
</p>

~~~java
  public List<BoardVO> listCriteria(Criteria cri) throws Exception;
~~~


<p style = "font-size:14px">
9 . 이전에 추가한 서비스를 구현한다.
</p>


~~~java
@Override
public List<BoardVO> listCriteria(Criteria cri) throws Exception {
  return dao.listCriteria(cri);
}
~~~

<p style = "font-size:14px">
<br>
10 . 컨트롤러에 listCriteria를 호출하는 메서드를 추가한다.
</p>

~~~java
@RequestMapping(value = "/listCri", method = RequestMethod.GET)
 public void listAll(Criteria cri, Model model) throws Exception {

   logger.info("show list Page with Criteria......................");
   model.addAttribute("list", service.listCriteria(cri));
 }
~~~


<p style = "font-size:14px">
<br>
11 . PageMaker 를 생성한다 . (PageMaker에는 페이징을 하기위한 전체 게시물 갯수, 시작 페이지, 끝 페이지와 prev, next를 정의해준다.)
</p>

사용한 sql 소스 파일 [다운로드][1]


{$ raw %}


[1]:{{https://shj7242.github.io/}}/download/success.jsp

{% endraw %}
