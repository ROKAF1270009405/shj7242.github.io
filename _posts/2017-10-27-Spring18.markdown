---
layout:     post
title:      "[Spring] 트랜잭션 처리"

date:       2017-10-27 11:30:00
author:     "신희준"
header-img: "img/background.jpg"
comments: true
---

<head>
 <meta property="og:type" content="website">
 <meta property="og:title" content="스프링 (Spring) 트랜잭션 (병행 제어)">
 <meta property="og:description" content="스프링 (Spring) 트랜잭션 (병행 제어)">
 <meta property="og:url" content="http://shj7242.github.io/2017/10/27/Spring18/">

 <meta name="twitter:card" content="summary">
  <meta name="twitter:title" content="스프링 (Spring) 트랜잭션 (병행 제어)">
  <meta name="twitter:description" content="스프링 (Spring) 트랜잭션 (병행 제어)">
  <meta name="FACEBOOK:domain" content="http://shj7242.github.io/2017/10/27/Spring18/">
  <meta name="facebook:card" content="summary">
   <meta name="facebook:title" content="스프링 (Spring) 트랜잭션 (병행 제어)">
   <meta name="facebook:description" content="스프링 (Spring) 트랜잭션 (병행 제어)">
   <meta name="facebook:domain" content="http://shj7242.github.io/2017/10/27/Spring18/">


 </head>


<br>
<H4 style ="font-weight:bold; color : black">2017 - 10 - 27 (금)</H4>
<li>트랜잭션 처리</li>

<br>
<H4 style ="font-weight:bold; color:black;">코드로 배우는 스프링 웹프로젝트[구멍가게 코딩단 지음] 참조</H4>
<br>


>트랜잭션의 개념

<br>
<p style = "font-size:14px">
트랜잭션은 데이터베이스 처리의 가장 기본이 되는 단위이다.
<br>
Spring MVC 에서는 DAO를 통해 DB와의 연산을 실행한다.
<br><br>
만약,  누군가 게시글에 댓글을 달았을 경우 게시판 DB에도 댓글 수가 증가해야 되며 댓글 DB에도 데이터가 추가가 되어야한다.
<br><br>
댓글을 달기 위한 컨트롤러가 호출이 되면 컨트롤러는 서비스를 호출할 것이고 이 서비스에서는 두가지 DAO를 생성하여 DB Transaction을 처리한다.
<br>
 이 경우 만약 하나의 트랜잭션이 실패할 경우 둘다 rollback 될 수 있어야한다.
<br>
트랜잭션 관리를 하기 위해 Spring MVC 에서는 @Transactional 애너테이션을 활용한다.
</p>
<br>
<br>

>@Transactional 활용

<br>
<p style= "font-size:14px">
@Transcational 의 우선순위
<br>
<br>
- 메소드의 @Transactional 설정이 우선순위가 가장높다.
- 클래스의 @Transactional 이 메소드보다 우선순위가 더 낮다.
- 인터페이스의 @Transactional 의 우선순위가 가장 낮다.

@Transactional 의 활용 예제
</p>

~~~java
//replyServiceImpl 의 일부
// 댓글을 처리하는 서비스의 일부이다.
@Transactional
 @Override
 public void addReply(ReplyVO vo) throws Exception {
// 아래를 보다시피 @Trnasactional 에너테이션을 사용하여 두개의 트랜잭션을 처리한다.
	 replyDAO.create(vo);
	 boardDAO.updateReplyCnt(vo.getBno(), 1);
 }

 @Transactional
 @Override
 public void removeReply(Integer rno) throws Exception {

 int bno = replyDAO.getBno(rno);
 replyDAO.delete(rno);
	 boardDAO.updateReplyCnt(bno, -1);
 }
 // 댓글을 삭제할 경우 테이블의 댓글 갯수가 줄어들어야한다.
~~~
