---
layout:     post
title:      "[Node.js] 미들웨어1 활용"

date:       2017-11-08 17:55:00
author:     "신희준"
header-img: "img/background.jpg"
comments: true
---

<head>
 <meta property="og:type" content="website">
 <meta property="og:title" content="노드js 미들웨어2">
 <meta property="og:description" content="노드js 미들웨어2">
 <meta property="og:url" content="http://shj7242.github.io/2017/11/08/Nodejs2/">

 <meta name="twitter:card" content="summary">
  <meta name="twitter:title" content="노드js 미들웨어2">
  <meta name="twitter:description" content="노드js 미들웨어2">
  <meta name="FACEBOOK:domain" content="http://shj7242.github.io/2017/11/08/Nodejs2/">
  <meta name="facebook:card" content="summary">
   <meta name="facebook:title" content="노드js 미들웨어2">
   <meta name="facebook:description" content="노드js 미들웨어2">
   <meta name="facebook:domain" content="http://shj7242.github.io/2017/11/08/Nodejs2/">


 </head>

<br>
<H4 style ="font-weight:bold; color:black;"> 모덴웹을 위한 Javascript, JQuery입문 [윤인성 지음] 참고</H4>

<H4 style ="font-weight:bold; color:black;"> </H4>
<br>
<H4 style ="font-weight:bold; color : black">2017 - 11 - 08 (수)</H4>
<li>static 미들웨어</li>
<li>route 미들웨어</li>
<br>

> static 미들웨어

<br>

* 정적 파일 제공

<br>

static 미들웨어란 예를들어 어떤 포털페이지에 접속하여 계속해서 새로고침했을 때 실시간 검색순위가 바뀌는 것을 볼 수 있다. 이러한 부분처럼 요청할 때마다 다이내믹한 반응을 보이는 부분을 동적파일이라고 부른다.

<br>
 하지만 이러한 부분과 달리 계속 요청해도 같은 부분이 있다. 이런 부분을 정적 파일이라고 한다. <b style="color:red">static 미들웨아</b>를 통해 이러한 정적 파일을 관리해줄 수 있다.

 <br>

 프로젝트 폴더에 우선 public 이라는 폴더를 하나 생성하고 index.html 파일을 이동시킨다.

~~~javascript
 var express =require('express');

 var app = express();
app.use(express.static('public'));
// localhost에 접속했을 때 public 폴더의 index.html을 실행시킨다.
~~~

<br><br>

> 라우터 미들웨어

<br>

사용자의 요청에 따라 사용자가 필요한 정보를 제공하는 것을 라우트 한다라고 한다. 이에 관한 미들웨어이다.
<br>

라우터 미들웨어에 관한 app 객체의 메서드이다.

<br>

| 메서드 이름 |  설명  |
|:--------|:--------|
| app.get() | GET 요청 처리 |
| app.post() | POST 요청 처리 |
| app.put() | PUT 요청처리 |
| app.del() | DELETE 요청처리 |
| app.all() | 모든방식의 요청처리 |

<br>

* all() 메서드

<br>

~~~javascript
var items =[
    {
        name: '우유',
        price : '2000'
    },
    {
        name: '홍차',
        price : '5000'
    },
    {
        name: '커피',
        price: '5000'
    }
];

//응답형식은 html형식, json형식, xml형식이 있다.

// localhost:포트번호/data.html 로 들어오는 모든 방식의 리퀘스트를 처리한다.
app.all('/data.html', function(request, response){
    var output = '';
    output += '<!DOCTYPE html>';
    output += '<html>';
    output += '<head>';
    output += ' <title>Data HTML</title>';
    output += '</head>';
    output += '<body>';
    items.forEach(function(item){
        output+= '<div>';
        output+= '  <h1>'+item.name+'</h1>';
        output += ' <h2>'+item.price+'</h2>'
        output +='</div>'
    });
    output +='</body>';
    output += '</html>';
    response.send(output);
});

// localhost:포트번호/data.json 로 들어오는 모든 방식의 리퀘스트를 처리한다.
app.all('/data.json', function(request, response){
    response.send(items)
});

// localhost:포트번호/data.xml 로 들어오는 모든 방식의 리퀘스트를 처리한다.
app.all('/data.xml', function(request, response){
    var output ='';
    output +='<?xml version ="1.0" encoding ="UTF-8" ?>';
    output +='<products>';
    items.forEach(function(item){
        output+='<product>';
        output +=' <name>'+item.name+'</name>';
        output +='  <price>'+item.price+'</price>';
        output +='</product>'
    });
    output +='</products>';
    response.type('text/xml');
    response.send(output);

});
~~~
