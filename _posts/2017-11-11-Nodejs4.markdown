---
layout:     post
title:      "[Node.js] URL 파라미터"

date:       2017-11-11 17:55:00
author:     "신희준"
header-img: "img/post-bg-02.jpg"
comments: true
---

<meta name="description" content="Spring스프링 애너테이션 Annotation정리 @Autowired,@Qualifier,@Resource,@Component,@PostConstruct,@Aspect
,@AOP,@POINTCUT,@AROUND,@ADVICE,@RequestMapping,@REPOSITORY,@SERVICE,@COMPONENT
">
<br>
<H4 style ="font-weight:bold; color:black;"> </H4>
<br>
<H4 style ="font-weight:bold; color : black">2017 - 11 - 11 (토)</H4>
<li>body-parser</li>
<li>Router</li>
<br>

> URL 파라미터

<br>

Spring 에서 target을 지정해준 것 처럼 URL 뒤에 ? 를 붙여서 요청 파라미터를 보내곤 했다.

ex : ) htts://abc.abc.com/board?bid=11&btitle="programing"

이런식으로 URL 에 리퀘스트 파라미터 정보를 추가하여 보낸다. 우선 GET방식의 경우 URL파라미터 정보를 받을 수 있기 때문에 서버에서 파싱하지 않아도 파라미터 정보를 받아볼 수 있다.

 POST 의 경우에는 조금 다르다. 파라미터 정보들이 Body안에 내장되어 전달이 된다. Node.js 에서는 아래와 같은 방식으로 파라미터 정보를 받는다.

<br>

~~~JavaScript
var router = express.Router();

router.route('/process/login/:name').post(function(req,res){
  console.log('/process/login/:name 처리함.');

  var paramName = req.params.name;
  var paramId = req.body.id || req.query.id;
  var paramPassword = req.body.password || req.query.password;

  console.log(paramId + ':::' + paramPassword);
  //파라미터로 전달된 값이 찍힌다.
})

app.use('/',router);
~~~

<br>
('/process/login/:name') : /process/login/ 뒤에 오는 값을 파라미터로 처리하겠다는 것이다.

(스프링에서 REST 의 @PathVariable 애너테이션을 붙여 param으로 받는 방식과 매우 비슷하다.)


~~~JavaScript
var paramName = req.params.name;
var paramId = req.body.id || req.query.id;
//body에 파라미터가 내장되어 있기에 id 값을 다음과 같은 형태로 받는다.
~~~

위에서 :name 으로 받은 파라미터의 경우 req.params.name 과 같은 형태 또는 req.params('name')의 형태로 값을 받을 수 있다.

물론 post의 전달일 경우 body 의 파라미터를 읽기위해
body-parser 모듈이 필요하다.

~~~JavaScript
$ npm install body-parser --save
~~~
